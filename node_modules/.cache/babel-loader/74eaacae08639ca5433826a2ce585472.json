{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/murilo/code/murilo/sipet/src/state/modules/auth.js","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/state/modules/auth.js","mtime":1571680536000},{"path":"/home/murilo/code/murilo/sipet/.babelrc","mtime":1587599733863},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1583949836565},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1583949846865}],"contextDependencies":[],"result":["import axios from 'axios';\nexport const state = {\n  currentUser: getSavedState('auth.currentUser')\n};\nexport const mutations = {\n  SET_CURRENT_USER(state, newValue) {\n    state.currentUser = newValue;\n    saveState('auth.currentUser', newValue);\n    setDefaultAuthHeaders(state);\n  }\n\n};\nexport const getters = {\n  // Whether the user is currently logged in.\n  loggedIn(state) {\n    return !!state.currentUser;\n  }\n\n};\nexport const actions = {\n  // This is automatically run in `src/state/store.js` when the app\n  // starts, along with any other actions named `init` in other modules.\n  init({\n    state,\n    dispatch\n  }) {\n    setDefaultAuthHeaders(state);\n    dispatch('validate');\n  },\n\n  // Logs in the current user.\n  logIn({\n    commit,\n    dispatch,\n    getters\n  }, {\n    username,\n    password\n  } = {}) {\n    if (getters.loggedIn) return dispatch('validate');\n    return axios.post('/api/session', {\n      username,\n      password\n    }).then(response => {\n      const user = response.data;\n      commit('SET_CURRENT_USER', user);\n      return user;\n    });\n  },\n\n  // Logs out the current user.\n  logOut({\n    commit\n  }) {\n    commit('SET_CURRENT_USER', null);\n  },\n\n  // register the user\n  register({\n    commit,\n    dispatch,\n    getters\n  }, {\n    fullname,\n    email,\n    password\n  } = {}) {\n    if (getters.loggedIn) return dispatch('validate');\n    return axios.post('/api/register', {\n      fullname,\n      email,\n      password\n    }).then(response => {\n      const user = response.data;\n      return user;\n    });\n  },\n\n  // register the user\n  resetPassword({\n    commit,\n    dispatch,\n    getters\n  }, {\n    email\n  } = {}) {\n    if (getters.loggedIn) return dispatch('validate');\n    return axios.post('/api/reset', {\n      email\n    }).then(response => {\n      const message = response.data;\n      return message;\n    });\n  },\n\n  // Validates the current user's token and refreshes it\n  // with new data from the API.\n  validate({\n    commit,\n    state\n  }) {\n    if (!state.currentUser) return Promise.resolve(null);\n    return axios.get('/api/session').then(response => {\n      const user = response.data;\n      commit('SET_CURRENT_USER', user);\n      return user;\n    }).catch(error => {\n      if (error.response && error.response.status === 401) {\n        commit('SET_CURRENT_USER', null);\n      }\n\n      return null;\n    });\n  }\n\n}; // ===\n// Private helpers\n// ===\n\nfunction getSavedState(key) {\n  return JSON.parse(window.localStorage.getItem(key));\n}\n\nfunction saveState(key, state) {\n  window.localStorage.setItem(key, JSON.stringify(state));\n}\n\nfunction setDefaultAuthHeaders(state) {\n  axios.defaults.headers.common.Authorization = state.currentUser ? state.currentUser.token : '';\n}",{"version":3,"sources":["/home/murilo/code/murilo/sipet/src/state/modules/auth.js"],"names":["axios","state","currentUser","getSavedState","mutations","SET_CURRENT_USER","newValue","saveState","setDefaultAuthHeaders","getters","loggedIn","actions","init","dispatch","logIn","commit","username","password","post","then","response","user","data","logOut","register","fullname","email","resetPassword","message","validate","Promise","resolve","get","catch","error","status","key","JSON","parse","window","localStorage","getItem","setItem","stringify","defaults","headers","common","Authorization","token"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nexport const state = {\n  currentUser: getSavedState('auth.currentUser'),\n}\n\nexport const mutations = {\n  SET_CURRENT_USER(state, newValue) {\n    state.currentUser = newValue\n    saveState('auth.currentUser', newValue)\n    setDefaultAuthHeaders(state)\n  },\n}\n\nexport const getters = {\n  // Whether the user is currently logged in.\n  loggedIn(state) {\n    return !!state.currentUser\n  },\n}\n\nexport const actions = {\n  // This is automatically run in `src/state/store.js` when the app\n  // starts, along with any other actions named `init` in other modules.\n  init({ state, dispatch }) {\n    setDefaultAuthHeaders(state)\n    dispatch('validate')\n  },\n\n  // Logs in the current user.\n  logIn({ commit, dispatch, getters }, { username, password } = {}) {\n    if (getters.loggedIn) return dispatch('validate')\n\n    return axios\n      .post('/api/session', { username, password })\n      .then((response) => {\n        const user = response.data\n        commit('SET_CURRENT_USER', user)\n        return user\n      })\n  },\n\n  // Logs out the current user.\n  logOut({ commit }) {\n    commit('SET_CURRENT_USER', null)\n  },\n\n  // register the user\n  register({ commit, dispatch, getters }, { fullname, email, password } = {}) {\n    if (getters.loggedIn) return dispatch('validate')\n\n    return axios\n      .post('/api/register', { fullname, email, password })\n      .then((response) => {\n        const user = response.data\n        return user\n      })\n  },\n\n  // register the user\n  resetPassword({ commit, dispatch, getters }, { email } = {}) {\n    if (getters.loggedIn) return dispatch('validate')\n\n    return axios.post('/api/reset', { email }).then((response) => {\n      const message = response.data\n      return message\n    })\n  },\n\n  // Validates the current user's token and refreshes it\n  // with new data from the API.\n  validate({ commit, state }) {\n    if (!state.currentUser) return Promise.resolve(null)\n\n    return axios\n      .get('/api/session')\n      .then((response) => {\n        const user = response.data\n        commit('SET_CURRENT_USER', user)\n        return user\n      })\n      .catch((error) => {\n        if (error.response && error.response.status === 401) {\n          commit('SET_CURRENT_USER', null)\n        }\n        return null\n      })\n  },\n}\n\n// ===\n// Private helpers\n// ===\n\nfunction getSavedState(key) {\n  return JSON.parse(window.localStorage.getItem(key))\n}\n\nfunction saveState(key, state) {\n  window.localStorage.setItem(key, JSON.stringify(state))\n}\n\nfunction setDefaultAuthHeaders(state) {\n  axios.defaults.headers.common.Authorization = state.currentUser\n    ? state.currentUser.token\n    : ''\n}\n"]}]}