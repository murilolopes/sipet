{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/murilo/code/murilo/sipet/src/sales/router/routes.js","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/sales/router/routes.js","mtime":1587601106478},{"path":"/home/murilo/code/murilo/sipet/.babelrc","mtime":1587599733863},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1583949836565},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1583949846865}],"contextDependencies":[],"result":["const dashboardRoutes = [{\n  path: '/',\n  name: 'Dashboard',\n  header: 'Navigation',\n  icon: 'home',\n  badge: {\n    text: '1',\n    varient: 'success'\n  },\n  component: () => lazyLoadView(import('@sales-views/pages/ui/forms/wizard/'))\n}];\nconst authProtectedRoutes = [...dashboardRoutes];\nconst allRoutes = [...authProtectedRoutes];\nexport { allRoutes, authProtectedRoutes }; // Lazy-loads view components, but with better UX. A loading view\n// will be used if the component takes a while to load, falling\n// back to a timeout view in case the page fails to load. You can\n// use this component to lazy-load a route with:\n//\n// component: () => lazyLoadView(import('@views/my-view'))\n//\n// NOTE: Components loaded with this strategy DO NOT have access\n// to in-component guards, such as beforeRouteEnter,\n// beforeRouteUpdate, and beforeRouteLeave. You must either use\n// route-level guards instead or lazy-load the component directly:\n//\n// component: () => import('@views/my-view')\n//\n\nfunction lazyLoadView(AsyncView) {\n  const AsyncHandler = () => ({\n    component: AsyncView,\n    // A component to use while the component is loading.\n    loading: require('@sales-components/_loading').default,\n    // Delay before showing the loading component.\n    // Default: 200 (milliseconds).\n    delay: 400,\n    // A fallback component in case the timeout is exceeded\n    // when loading the component.\n    // error: require('@views/_timeout').default,\n    // Time before giving up trying to load the component.\n    // Default: Infinity (milliseconds).\n    timeout: 10000\n  });\n\n  return Promise.resolve({\n    functional: true,\n\n    render(h, {\n      data,\n      children\n    }) {\n      // Transparently pass any props or children\n      // to the view component.\n      return h(AsyncHandler, data, children);\n    }\n\n  });\n}",{"version":3,"sources":["/home/murilo/code/murilo/sipet/src/sales/router/routes.js"],"names":["dashboardRoutes","path","name","header","icon","badge","text","varient","component","lazyLoadView","authProtectedRoutes","allRoutes","AsyncView","AsyncHandler","loading","require","default","delay","timeout","Promise","resolve","functional","render","h","data","children"],"mappings":"AAAA,MAAMA,eAAe,GAAG,CACtB;AACEC,EAAAA,IAAI,EAAE,GADR;AAEEC,EAAAA,IAAI,EAAE,WAFR;AAGEC,EAAAA,MAAM,EAAE,YAHV;AAIEC,EAAAA,IAAI,EAAE,MAJR;AAKEC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,GADD;AAELC,IAAAA,OAAO,EAAE;AAFJ,GALT;AASEC,EAAAA,SAAS,EAAE,MAAMC,YAAY,CAAC,OAAO,qCAAP,CAAD;AAT/B,CADsB,CAAxB;AAcA,MAAMC,mBAAmB,GAAG,CAC1B,GAAGV,eADuB,CAA5B;AAGA,MAAMW,SAAS,GAAG,CAAC,GAAGD,mBAAJ,CAAlB;AAEA,SAASC,SAAT,EAAoBD,mBAApB,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,YAAT,CAAsBG,SAAtB,EAAiC;AAC/B,QAAMC,YAAY,GAAG,OAAO;AAC1BL,IAAAA,SAAS,EAAEI,SADe;AAE1B;AACAE,IAAAA,OAAO,EAAEC,OAAO,CAAC,4BAAD,CAAP,CAAsCC,OAHrB;AAI1B;AACA;AACAC,IAAAA,KAAK,EAAE,GANmB;AAO1B;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,EAAE;AAZiB,GAAP,CAArB;;AAeA,SAAOC,OAAO,CAACC,OAAR,CAAgB;AACrBC,IAAAA,UAAU,EAAE,IADS;;AAErBC,IAAAA,MAAM,CAACC,CAAD,EAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAJ,EAAwB;AAC5B;AACA;AACA,aAAOF,CAAC,CAACV,YAAD,EAAeW,IAAf,EAAqBC,QAArB,CAAR;AACD;;AANoB,GAAhB,CAAP;AAQD","sourcesContent":["const dashboardRoutes = [\n  {\n    path: '/',\n    name: 'Dashboard',\n    header: 'Navigation',\n    icon: 'home',\n    badge: {\n      text: '1',\n      varient: 'success',\n    },\n    component: () => lazyLoadView(import('@sales-views/pages/ui/forms/wizard/')),\n  },\n]\n\nconst authProtectedRoutes = [\n  ...dashboardRoutes,\n]\nconst allRoutes = [...authProtectedRoutes]\n\nexport { allRoutes, authProtectedRoutes }\n\n// Lazy-loads view components, but with better UX. A loading view\n// will be used if the component takes a while to load, falling\n// back to a timeout view in case the page fails to load. You can\n// use this component to lazy-load a route with:\n//\n// component: () => lazyLoadView(import('@views/my-view'))\n//\n// NOTE: Components loaded with this strategy DO NOT have access\n// to in-component guards, such as beforeRouteEnter,\n// beforeRouteUpdate, and beforeRouteLeave. You must either use\n// route-level guards instead or lazy-load the component directly:\n//\n// component: () => import('@views/my-view')\n//\nfunction lazyLoadView(AsyncView) {\n  const AsyncHandler = () => ({\n    component: AsyncView,\n    // A component to use while the component is loading.\n    loading: require('@sales-components/_loading').default,\n    // Delay before showing the loading component.\n    // Default: 200 (milliseconds).\n    delay: 400,\n    // A fallback component in case the timeout is exceeded\n    // when loading the component.\n    // error: require('@views/_timeout').default,\n    // Time before giving up trying to load the component.\n    // Default: Infinity (milliseconds).\n    timeout: 10000,\n  })\n\n  return Promise.resolve({\n    functional: true,\n    render(h, { data, children }) {\n      // Transparently pass any props or children\n      // to the view component.\n      return h(AsyncHandler, data, children)\n    },\n  })\n}\n"]}]}