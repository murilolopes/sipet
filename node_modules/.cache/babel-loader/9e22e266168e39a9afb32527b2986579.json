{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/murilo/code/murilo/sipet/src/state/modules/users.js","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/state/modules/users.js","mtime":1571680536000},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1583949836565},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1583949846865}],"contextDependencies":[],"result":["import axios from 'axios';\nexport const state = {\n  cached: []\n};\nexport const getters = {};\nexport const mutations = {\n  CACHE_USER(state, newUser) {\n    state.cached.push(newUser);\n  }\n\n};\nexport const actions = {\n  fetchUser({\n    commit,\n    state,\n    rootState\n  }, {\n    username\n  }) {\n    // 1. Check if we already have the user as a current user.\n    const {\n      currentUser\n    } = rootState.auth;\n\n    if (currentUser && currentUser.username === username) {\n      return Promise.resolve(currentUser);\n    } // 2. Check if we've already fetched and cached the user.\n\n\n    const matchedUser = state.cached.find(user => user.username === username);\n\n    if (matchedUser) {\n      return Promise.resolve(currentUser);\n    } // 3. Fetch the user from the API and cache it in case\n    //    we need it again in the future.\n\n\n    return axios.get(`/api/users/${username}`).then(response => {\n      const user = response.data;\n      commit('CACHE_USER', user);\n      return user;\n    });\n  }\n\n};",{"version":3,"sources":["/home/murilo/code/murilo/sipet/src/state/modules/users.js"],"names":["axios","state","cached","getters","mutations","CACHE_USER","newUser","push","actions","fetchUser","commit","rootState","username","currentUser","auth","Promise","resolve","matchedUser","find","user","get","then","response","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,KAAK,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAAd;AAIP,OAAO,MAAMC,OAAO,GAAG,EAAhB;AAEP,OAAO,MAAMC,SAAS,GAAG;AACvBC,EAAAA,UAAU,CAACJ,KAAD,EAAQK,OAAR,EAAiB;AACzBL,IAAAA,KAAK,CAACC,MAAN,CAAaK,IAAb,CAAkBD,OAAlB;AACD;;AAHsB,CAAlB;AAMP,OAAO,MAAME,OAAO,GAAG;AACrBC,EAAAA,SAAS,CAAC;AAAEC,IAAAA,MAAF;AAAUT,IAAAA,KAAV;AAAiBU,IAAAA;AAAjB,GAAD,EAA+B;AAAEC,IAAAA;AAAF,GAA/B,EAA6C;AACpD;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBF,SAAS,CAACG,IAAlC;;AACA,QAAID,WAAW,IAAIA,WAAW,CAACD,QAAZ,KAAyBA,QAA5C,EAAsD;AACpD,aAAOG,OAAO,CAACC,OAAR,CAAgBH,WAAhB,CAAP;AACD,KALmD,CAOpD;;;AACA,UAAMI,WAAW,GAAGhB,KAAK,CAACC,MAAN,CAAagB,IAAb,CAAmBC,IAAD,IAAUA,IAAI,CAACP,QAAL,KAAkBA,QAA9C,CAApB;;AACA,QAAIK,WAAJ,EAAiB;AACf,aAAOF,OAAO,CAACC,OAAR,CAAgBH,WAAhB,CAAP;AACD,KAXmD,CAapD;AACA;;;AACA,WAAOb,KAAK,CAACoB,GAAN,CAAW,cAAaR,QAAS,EAAjC,EAAoCS,IAApC,CAA0CC,QAAD,IAAc;AAC5D,YAAMH,IAAI,GAAGG,QAAQ,CAACC,IAAtB;AACAb,MAAAA,MAAM,CAAC,YAAD,EAAeS,IAAf,CAAN;AACA,aAAOA,IAAP;AACD,KAJM,CAAP;AAKD;;AArBoB,CAAhB","sourcesContent":["import axios from 'axios'\n\nexport const state = {\n  cached: [],\n}\n\nexport const getters = {}\n\nexport const mutations = {\n  CACHE_USER(state, newUser) {\n    state.cached.push(newUser)\n  },\n}\n\nexport const actions = {\n  fetchUser({ commit, state, rootState }, { username }) {\n    // 1. Check if we already have the user as a current user.\n    const { currentUser } = rootState.auth\n    if (currentUser && currentUser.username === username) {\n      return Promise.resolve(currentUser)\n    }\n\n    // 2. Check if we've already fetched and cached the user.\n    const matchedUser = state.cached.find((user) => user.username === username)\n    if (matchedUser) {\n      return Promise.resolve(currentUser)\n    }\n\n    // 3. Fetch the user from the API and cache it in case\n    //    we need it again in the future.\n    return axios.get(`/api/users/${username}`).then((response) => {\n      const user = response.data\n      commit('CACHE_USER', user)\n      return user\n    })\n  },\n}\n"]}]}