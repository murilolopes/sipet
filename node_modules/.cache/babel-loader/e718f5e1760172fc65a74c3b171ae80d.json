{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js!/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/home/murilo/code/murilo/sipet/src/state/modules/index.js","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/state/modules/index.js","mtime":1570196270000},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1583949836565},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1583949846865}],"contextDependencies":[],"result":["// Register each file as a corresponding Vuex module. Module nesting\n// will mirror [sub-]directory hierarchy and modules are namespaced\n// as the camelCase equivalent of their file name.\nimport camelCase from 'lodash/camelCase';\nconst modulesCache = {};\nconst storeData = {\n  modules: {}\n};\n\n(function updateModules() {\n  // Allow us to dynamically require all Vuex module files.\n  // https://webpack.js.org/guides/dependency-management/#require-context\n  const requireModule = require.context( // Search for files in the current directory.\n  '.', // Search for files in subdirectories.\n  true, // Include any .js files that are not this file or a unit test.\n  /^((?!index|\\.unit\\.).)*\\.js$/); // For every Vuex module...\n\n\n  requireModule.keys().forEach(fileName => {\n    const moduleDefinition = requireModule(fileName); // Skip the module during hot reload if it refers to the\n    // same module definition as the one we have cached.\n\n    if (modulesCache[fileName] === moduleDefinition) return; // Update the module cache, for efficient hot reloading.\n\n    modulesCache[fileName] = moduleDefinition; // Get the module path as an array.\n\n    const modulePath = fileName // Remove the \"./\" from the beginning.\n    .replace(/^\\.\\//, '') // Remove the file extension from the end.\n    .replace(/\\.\\w+$/, '') // Split nested modules into an array path.\n    .split(/\\//) // camelCase all module namespaces and names.\n    .map(camelCase); // Get the modules object for the current path.\n\n    const {\n      modules\n    } = getNamespace(storeData, modulePath); // Add the module to our modules object.\n\n    modules[modulePath.pop()] = {\n      // Modules are namespaced by default.\n      namespaced: true,\n      ...moduleDefinition\n    };\n  }); // If the environment supports hot reloading...\n\n  if (module.hot) {\n    // Whenever any Vuex module is updated...\n    module.hot.accept(requireModule.id, () => {\n      // Update `storeData.modules` with the latest definitions.\n      updateModules(); // Trigger a hot update in the store.\n\n      require('../store').default.hotUpdate({\n        modules: storeData.modules\n      });\n    });\n  }\n})(); // Recursively get the namespace of a Vuex module, even if nested.\n\n\nfunction getNamespace(subtree, path) {\n  if (path.length === 1) return subtree;\n  const namespace = path.shift();\n  subtree.modules[namespace] = {\n    modules: {},\n    namespaced: true,\n    ...subtree.modules[namespace]\n  };\n  return getNamespace(subtree.modules[namespace], path);\n}\n\nexport default storeData.modules;",{"version":3,"sources":["/home/murilo/code/murilo/sipet/src/state/modules/index.js"],"names":["camelCase","modulesCache","storeData","modules","updateModules","requireModule","require","context","keys","forEach","fileName","moduleDefinition","modulePath","replace","split","map","getNamespace","pop","namespaced","module","hot","accept","id","default","hotUpdate","subtree","path","length","namespace","shift"],"mappings":"AAAA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,kBAAtB;AAEA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAlB;;AAEC,CAAC,SAASC,aAAT,GAAyB;AACzB;AACA;AACA,QAAMC,aAAa,GAAGC,OAAO,CAACC,OAAR,EACpB;AACA,KAFoB,EAGpB;AACA,MAJoB,EAKpB;AACA,gCANoB,CAAtB,CAHyB,CAYzB;;;AACAF,EAAAA,aAAa,CAACG,IAAd,GAAqBC,OAArB,CAA8BC,QAAD,IAAc;AACzC,UAAMC,gBAAgB,GAAGN,aAAa,CAACK,QAAD,CAAtC,CADyC,CAGzC;AACA;;AACA,QAAIT,YAAY,CAACS,QAAD,CAAZ,KAA2BC,gBAA/B,EAAiD,OALR,CAOzC;;AACAV,IAAAA,YAAY,CAACS,QAAD,CAAZ,GAAyBC,gBAAzB,CARyC,CAUzC;;AACA,UAAMC,UAAU,GAAGF,QAAQ,CACzB;AADyB,KAExBG,OAFgB,CAER,OAFQ,EAEC,EAFD,EAGjB;AAHiB,KAIhBA,OAJgB,CAIR,QAJQ,EAIE,EAJF,EAKjB;AALiB,KAMhBC,KANgB,CAMV,IANU,EAOjB;AAPiB,KAQhBC,GARgB,CAQZf,SARY,CAAnB,CAXyC,CAqBzC;;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAca,YAAY,CAACd,SAAD,EAAYU,UAAZ,CAAhC,CAtByC,CAwBzC;;AACAT,IAAAA,OAAO,CAACS,UAAU,CAACK,GAAX,EAAD,CAAP,GAA4B;AAC1B;AACAC,MAAAA,UAAU,EAAE,IAFc;AAG1B,SAAGP;AAHuB,KAA5B;AAKD,GA9BD,EAbyB,CA6CzB;;AACA,MAAIQ,MAAM,CAACC,GAAX,EAAgB;AACd;AACAD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkBhB,aAAa,CAACiB,EAAhC,EAAoC,MAAM;AACxC;AACAlB,MAAAA,aAAa,GAF2B,CAGxC;;AACAE,MAAAA,OAAO,CAAC,UAAD,CAAP,CAAoBiB,OAApB,CAA4BC,SAA5B,CAAsC;AAAErB,QAAAA,OAAO,EAAED,SAAS,CAACC;AAArB,OAAtC;AACD,KALD;AAMD;AACF,CAvDA,I,CAyDD;;;AACA,SAASa,YAAT,CAAsBS,OAAtB,EAA+BC,IAA/B,EAAqC;AACnC,MAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB,OAAOF,OAAP;AAEvB,QAAMG,SAAS,GAAGF,IAAI,CAACG,KAAL,EAAlB;AACAJ,EAAAA,OAAO,CAACtB,OAAR,CAAgByB,SAAhB,IAA6B;AAC3BzB,IAAAA,OAAO,EAAE,EADkB;AAE3Be,IAAAA,UAAU,EAAE,IAFe;AAG3B,OAAGO,OAAO,CAACtB,OAAR,CAAgByB,SAAhB;AAHwB,GAA7B;AAKA,SAAOZ,YAAY,CAACS,OAAO,CAACtB,OAAR,CAAgByB,SAAhB,CAAD,EAA6BF,IAA7B,CAAnB;AACD;;AAED,eAAexB,SAAS,CAACC,OAAzB","sourcesContent":["// Register each file as a corresponding Vuex module. Module nesting\n// will mirror [sub-]directory hierarchy and modules are namespaced\n// as the camelCase equivalent of their file name.\n\nimport camelCase from 'lodash/camelCase'\n\nconst modulesCache = {}\nconst storeData = { modules: {} }\n\n;(function updateModules() {\n  // Allow us to dynamically require all Vuex module files.\n  // https://webpack.js.org/guides/dependency-management/#require-context\n  const requireModule = require.context(\n    // Search for files in the current directory.\n    '.',\n    // Search for files in subdirectories.\n    true,\n    // Include any .js files that are not this file or a unit test.\n    /^((?!index|\\.unit\\.).)*\\.js$/\n  )\n\n  // For every Vuex module...\n  requireModule.keys().forEach((fileName) => {\n    const moduleDefinition = requireModule(fileName)\n\n    // Skip the module during hot reload if it refers to the\n    // same module definition as the one we have cached.\n    if (modulesCache[fileName] === moduleDefinition) return\n\n    // Update the module cache, for efficient hot reloading.\n    modulesCache[fileName] = moduleDefinition\n\n    // Get the module path as an array.\n    const modulePath = fileName\n      // Remove the \"./\" from the beginning.\n      .replace(/^\\.\\//, '')\n      // Remove the file extension from the end.\n      .replace(/\\.\\w+$/, '')\n      // Split nested modules into an array path.\n      .split(/\\//)\n      // camelCase all module namespaces and names.\n      .map(camelCase)\n\n    // Get the modules object for the current path.\n    const { modules } = getNamespace(storeData, modulePath)\n\n    // Add the module to our modules object.\n    modules[modulePath.pop()] = {\n      // Modules are namespaced by default.\n      namespaced: true,\n      ...moduleDefinition,\n    }\n  })\n\n  // If the environment supports hot reloading...\n  if (module.hot) {\n    // Whenever any Vuex module is updated...\n    module.hot.accept(requireModule.id, () => {\n      // Update `storeData.modules` with the latest definitions.\n      updateModules()\n      // Trigger a hot update in the store.\n      require('../store').default.hotUpdate({ modules: storeData.modules })\n    })\n  }\n})()\n\n// Recursively get the namespace of a Vuex module, even if nested.\nfunction getNamespace(subtree, path) {\n  if (path.length === 1) return subtree\n\n  const namespace = path.shift()\n  subtree.modules[namespace] = {\n    modules: {},\n    namespaced: true,\n    ...subtree.modules[namespace],\n  }\n  return getNamespace(subtree.modules[namespace], path)\n}\n\nexport default storeData.modules\n"]}]}