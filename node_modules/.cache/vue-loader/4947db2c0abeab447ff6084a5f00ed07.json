{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/murilo/code/murilo/sipet/src/sales/router/views/pages/ui/forms/wizard/step1.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/sales/router/views/pages/ui/forms/wizard/step1.vue","mtime":1587066565723},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":1583949836565},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js","mtime":1583949852838}],"contextDependencies":[],"result":["\nimport { required, minLength, email, sameAs } from 'vuelidate/lib/validators'\nimport Multiselect from 'vue-multiselect'\n\nconst cpf = (value) => {\n  var soma;\n  var resto;\n  soma = 0;\n  if (value.length == 14) {\n    value = value.replace('-', '').replace('.', '').replace('.', '')\n    if (value == \"00000000000\") return false;\n     \n    for (let i=1; i<=9; i++) soma = soma + parseInt(value.substring(i-1, i)) * (11 - i);\n    resto = (soma * 10) % 11;\n\n    if ((resto == 10) || (resto == 11))  resto = 0;\n    if (resto != parseInt(value.substring(9, 10)) ) return false;\n\n    soma = 0;\n    for (let i = 1; i <= 10; i++) soma = soma + parseInt(value.substring(i-1, i)) * (12 - i);\n    resto = (soma * 10) % 11;\n\n    if ((resto == 10) || (resto == 11))  resto = 0;\n    if (resto != parseInt(value.substring(10, 11) ) ) return false;\n    return true;\n  }\n  return true\n}\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data() {\n    return {\n      client: {\n        name: '',\n        cpf: '',\n        birthdate: '',\n        phone: '',\n        zipcode: '',\n        address: '',\n        number: '',\n        complement: '',\n        neighborhood: '',\n        city: '',\n        state: '',\n        credential_attributes: {\n          credential_type: 'client',\n          email: '',\n          password: '',\n          password_confirmation: '',\n        }\n      },\n      states: ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', \n        'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', \n        'RO', 'RR', 'SC', 'SP', 'SE', 'TO'\n      ]\n    }\n  },\n  validations: {\n    client: {\n      credential_attributes: {\n        email: { \n          required, \n          email,\n          async isUnique(value) {\n            if (value === '' || !this.$v.client.credential_attributes.email.email) return true\n            if (this.$v.client.credential_attributes.email.email) {\n              const response = await this.$api.post('clients/by_email', { 'email': value })\n              return !response.data\n            }\n          }\n        },\n        password: { required, minLength: minLength(8) },\n        password_confirmation: { required, minLength: minLength(8), sameAsPassword: sameAs('password') },\n      },\n      name: { required },\n      cpf: { \n        required,\n        cpf,\n        minLength: minLength(14),\n        async isUnique(value) {\n          if (value === '' || !this.$v.client.cpf.cpf) return true\n\n          if (this.$v.client.cpf.cpf) {\n            const response = await this.$api.post('clients/by_cpf', { cpf: value })\n            return !response.data\n          }\n        }\n      },\n      birthdate: { \n        required, \n        minLength: minLength(10),\n        date: (value) => { \n          if (value.length == 10) return moment(value, 'DD/MM/YYYY', true).isValid()\n          return true\n        },\n      },\n      phone: { required, minLength: (value) => value.replace(/\\D/g, '').length == 11 },\n      zipcode: { required },\n      address: { required },\n      number: { required },\n      neighborhood: { required },\n      city: { required },\n      state: { required },\n    }\n  },\n  methods: {\n    validate() {\n      this.$v.client.$touch()\n      var isValid = !this.$v.client.$invalid\n      this.$emit('on-validate', { client: this.client }, isValid)\n      return isValid\n    },\n  },\n  watch: {\n    'client.zipcode'(value) {\n      if (value.length == 9){\n        let that = this\n        value = value.replace(\"-\", \"\")\n        that.$pagarme.zipcodes.find({zipcode: value})\n          .then(response => {\n            that.client.address = response.street\n            that.client.neighborhood = response.neighborhood\n            that.client.city = response.city\n            that.client.state = response.state\n            this.$refs.number.$el.focus()\n          })\n      }\n    }\n  }\n}\n",{"version":3,"sources":["step1.vue"],"names":[],"mappingsfile":"step1.vue","sourceRoot":"src/sales/router/views/pages/ui/forms/wizard","sourcesContent":["<script>\nimport { required, minLength, email, sameAs } from 'vuelidate/lib/validators'\nimport Multiselect from 'vue-multiselect'\n\nconst cpf = (value) => {\n  var soma;\n  var resto;\n  soma = 0;\n  if (value.length == 14) {\n    value = value.replace('-', '').replace('.', '').replace('.', '')\n    if (value == \"00000000000\") return false;\n     \n    for (let i=1; i<=9; i++) soma = soma + parseInt(value.substring(i-1, i)) * (11 - i);\n    resto = (soma * 10) % 11;\n\n    if ((resto == 10) || (resto == 11))  resto = 0;\n    if (resto != parseInt(value.substring(9, 10)) ) return false;\n\n    soma = 0;\n    for (let i = 1; i <= 10; i++) soma = soma + parseInt(value.substring(i-1, i)) * (12 - i);\n    resto = (soma * 10) % 11;\n\n    if ((resto == 10) || (resto == 11))  resto = 0;\n    if (resto != parseInt(value.substring(10, 11) ) ) return false;\n    return true;\n  }\n  return true\n}\n\nexport default {\n  components: {\n    Multiselect\n  },\n  data() {\n    return {\n      client: {\n        name: '',\n        cpf: '',\n        birthdate: '',\n        phone: '',\n        zipcode: '',\n        address: '',\n        number: '',\n        complement: '',\n        neighborhood: '',\n        city: '',\n        state: '',\n        credential_attributes: {\n          credential_type: 'client',\n          email: '',\n          password: '',\n          password_confirmation: '',\n        }\n      },\n      states: ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', \n        'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', \n        'RO', 'RR', 'SC', 'SP', 'SE', 'TO'\n      ]\n    }\n  },\n  validations: {\n    client: {\n      credential_attributes: {\n        email: { \n          required, \n          email,\n          async isUnique(value) {\n            if (value === '' || !this.$v.client.credential_attributes.email.email) return true\n            if (this.$v.client.credential_attributes.email.email) {\n              const response = await this.$api.post('clients/by_email', { 'email': value })\n              return !response.data\n            }\n          }\n        },\n        password: { required, minLength: minLength(8) },\n        password_confirmation: { required, minLength: minLength(8), sameAsPassword: sameAs('password') },\n      },\n      name: { required },\n      cpf: { \n        required,\n        cpf,\n        minLength: minLength(14),\n        async isUnique(value) {\n          if (value === '' || !this.$v.client.cpf.cpf) return true\n\n          if (this.$v.client.cpf.cpf) {\n            const response = await this.$api.post('clients/by_cpf', { cpf: value })\n            return !response.data\n          }\n        }\n      },\n      birthdate: { \n        required, \n        minLength: minLength(10),\n        date: (value) => { \n          if (value.length == 10) return moment(value, 'DD/MM/YYYY', true).isValid()\n          return true\n        },\n      },\n      phone: { required, minLength: (value) => value.replace(/\\D/g, '').length == 11 },\n      zipcode: { required },\n      address: { required },\n      number: { required },\n      neighborhood: { required },\n      city: { required },\n      state: { required },\n    }\n  },\n  methods: {\n    validate() {\n      this.$v.client.$touch()\n      var isValid = !this.$v.client.$invalid\n      this.$emit('on-validate', { client: this.client }, isValid)\n      return isValid\n    },\n  },\n  watch: {\n    'client.zipcode'(value) {\n      if (value.length == 9){\n        let that = this\n        value = value.replace(\"-\", \"\")\n        that.$pagarme.zipcodes.find({zipcode: value})\n          .then(response => {\n            that.client.address = response.street\n            that.client.neighborhood = response.neighborhood\n            that.client.city = response.city\n            that.client.state = response.state\n            this.$refs.number.$el.focus()\n          })\n      }\n    }\n  }\n}\n</script>\n\n<template>\n  <div>\n    <form class=\"form-horizontal\">\n      <div class=\"row\">\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"email\" :class=\"{ 'has-error': $v.client.credential_attributes.email.$error, 'form-group--loading': $v.client.credential_attributes.email.$pending }\" >\n            <label> Email <span class=\"text-danger\">*</span> </label>\n            <input class=\"form-control\" id=\"email\" type=\"email\" v-model=\"client.credential_attributes.email\"\n              :class=\"{ 'is-invalid': $v.client.credential_attributes.email.$error }\">\n            </input>\n            <div v-if=\"$v.client.credential_attributes.email.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.credential_attributes.email.required\">Este campo é obrigatório.</span>\n              <span v-if=\"!$v.client.credential_attributes.email.email\">Email inválido.</span>\n              <span v-if=\"!$v.client.credential_attributes.email.isUnique\">Email já esta em uso.</span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-3\">\n          <b-form-group label-for=\"password\">\n            <label> Senha\n              <span class=\"text-danger\">*</span>\n            </label>\n            <b-form-input id=\"password\" v-model=\"client.credential_attributes.password\" type=\"password\" \n            :class=\"{ 'is-invalid': $v.client.credential_attributes.password.$error }\">\n            </b-form-input>\n            <div v-if=\"$v.client.credential_attributes.password.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.credential_attributes.password.required\">\n                Esse campo é obrigatório.\n              </span>\n              <span v-if=\"!$v.client.credential_attributes.password.minLength\">\n                A senha deve ter no mínimo {{ $v.client.credential_attributes.password.$params.minLength.min }} caracteres.\n              </span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-3\">\n          <b-form-group label-for=\"password_confirmation\">\n            <label> Confirmação de senha\n              <span class=\"text-danger\">*</span>\n            </label>\n            <b-form-input id=\"password_confirmation\" v-model=\"client.credential_attributes.password_confirmation\" type=\"password\" \n            :class=\"{ 'is-invalid': $v.client.credential_attributes.password_confirmation.$error }\">\n            </b-form-input>\n            <div v-if=\"$v.client.credential_attributes.password_confirmation.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.credential_attributes.password_confirmation.required\">\n                Esse campo é obrigatório.\n              </span>\n              <span v-if=\"!$v.client.credential_attributes.password_confirmation.sameAsPassword && \n                client.credential_attributes.password_confirmation.length > 1\">\n                A senha deve ser identica.\n              </span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"name\" :class=\"{ 'has-error': $v.client.name.$error }\" >\n            <label> Nome <span class=\"text-danger\">*</span> </label>\n            <b-form-input id=\"personName\" v-model=\"client.name\"\n              :class=\"{ 'is-invalid': $v.client.name.$error }\">\n            </b-form-input>\n            <div v-if=\"$v.client.name.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.name.required\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"cpf\" :class=\"{ 'has-error': $v.client.cpf.$error, 'form-group--loading': $v.client.cpf.$pending }\" >\n            <label> CPF <span class=\"text-danger\">*</span> </label>\n            <input class=\"form-control\" v-mask=\"'###.###.###-##'\" id=\"cpf\" \n              :class=\"{ 'is-invalid': $v.client.cpf.$error }\" type=\"tel\" v-model=\"client.cpf\">\n            </input>\n            <div v-if=\"$v.client.cpf.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.cpf.required || !$v.client.cpf.minLength\">Este campo é obrigatório.</span>\n              <span v-if=\"!$v.client.cpf.cpf\">CPF inválido.</span>\n              <span v-if=\"!$v.client.cpf.isUnique\">CPF já esta em uso.</span>\n\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"birthdate\" :class=\"{ 'has-error': $v.client.birthdate.$error }\" >\n            <label> Data de nascimento <span class=\"text-danger\">*</span> </label>\n            <input class=\"form-control\" v-mask=\"'##/##/####'\" id=\"personBirthdate\"\n              :class=\"{ 'is-invalid': $v.client.birthdate.$error }\" type=\"tel\" v-model=\"client.birthdate\">\n            </input>\n            <div v-if=\"$v.client.birthdate.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.birthdate.required || !$v.client.birthdate.minLength\">Este campo é obrigatório. </span>\n              <span v-if=\"!$v.client.birthdate.date\">Data inválida. </span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"phone\" :class=\"{ 'has-error': $v.client.phone.$error }\" >\n            <label> Telefone <span class=\"text-danger\">*</span>  </label>\n            <input class=\"form-control\" v-mask=\"'(##) #####-####'\" id=\"phone\"\n              :class=\"{ 'is-invalid': $v.client.phone.$error }\" type=\"tel\" v-model=\"client.phone\">\n            </input>\n            <div v-if=\"$v.client.phone.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.phone.required || !$v.client.phone.minLength\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"zipcode\" :class=\"{ 'has-error': $v.client.zipcode.$error }\" >\n            <label> CEP <span class=\"text-danger\">*</span> </label>\n            <input class=\"form-control\" v-mask=\"'#####-###'\" id=\"zipcode\"\n              :class=\"{ 'is-invalid': $v.client.zipcode.$error }\" type=\"tel\" v-model=\"client.zipcode\">\n            </input>\n            <div v-if=\"$v.client.zipcode.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.zipcode.required\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"address\" :class=\"{ 'has-error': $v.client.address.$error }\" >\n            <label> Endereço <span class=\"text-danger\">*</span> </label>\n            <b-form-input id=\"address\" v-model=\"client.address\"\n              :class=\"{ 'is-invalid': $v.client.address.$error }\"> \n            </b-form-input>\n            <div v-if=\"$v.client.address.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.address.required\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-6 col-md-3\">\n          <b-form-group label-for=\"number\" :class=\"{ 'has-error': $v.client.number.$error }\" >\n            <label> Número <span class=\"text-danger\">*</span> </label>\n            <b-form-input id=\"number\" v-model=\"client.number\" ref=\"number\"\n              :class=\"{ 'is-invalid': $v.client.number.$error }\"> \n            </b-form-input>\n            <div v-if=\"$v.client.number.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.number.required\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-6 col-md-3\">\n          <b-form-group label-for=\"neighborhood\" :class=\"{ 'has-error': $v.client.neighborhood.$error }\" >\n            <label> Bairo <span class=\"text-danger\">*</span> </label>\n            <b-form-input id=\"neighborhood\" v-model=\"client.neighborhood\"\n              :class=\"{ 'is-invalid': $v.client.neighborhood.$error }\"> \n            </b-form-input>\n            <div v-if=\"$v.client.neighborhood.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.neighborhood.required\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"complement\">\n            <label> Complemento </label>\n            <b-form-input  v-model=\"client.complement\">\n            </b-form-input>\n          </b-form-group>\n        </div>\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"city\" :class=\"{ 'has-error': $v.client.city.$error }\" >\n            <label> Cidade <span class=\"text-danger\">*</span> </label>\n            <b-form-input id=\"city\" v-model=\"client.city\"\n              :class=\"{ 'is-invalid': $v.client.city.$error }\">\n            </b-form-input>\n            <div v-if=\"$v.client.city.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.city.required\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n\n        <div class=\"col-12 col-md-6\">\n          <b-form-group label-for=\"species\" :class=\"{ 'has-error': $v.client.state.$error }\" >\n            <label> Estado <span class=\"text-danger\">*</span> </label>\n            <multiselect v-model=\"client.state\" :class=\"{ 'is-invalid': $v.client.state.$error }\"\n              selectLabel=\"\" placeholder=\"\" selectedLabel=\"Selecionado\" deselectLabel=\"Remover\"\n              :options=\"states\"></multiselect>\n            <div v-if=\"$v.client.state.$error\" class=\"invalid-feedback\">\n              <span v-if=\"!$v.client.state.required\">Este campo é obrigatório.</span>\n            </div>\n          </b-form-group>\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n"]}]}