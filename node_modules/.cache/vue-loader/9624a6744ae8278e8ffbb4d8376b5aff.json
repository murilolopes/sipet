{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/murilo/code/murilo/sipet/src/router/views/pages/ui/forms/advanced.vue?vue&type=template&id=5f541778&","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/router/views/pages/ui/forms/advanced.vue","mtime":1573758918000},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1583949852838},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js","mtime":1583949852838},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1583949852838},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js","mtime":1583949852838}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"Layout\",\n    [\n      _c(\"PageHeader\", { attrs: { title: _vm.title, items: _vm.items } }),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12\" }, [\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\"div\", { staticClass: \"card-body\" }, [\n              _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n                _vm._v(\"Select\")\n              ]),\n              _c(\"p\", { staticClass: \"sub-header\" }, [\n                _vm._v(\n                  \"Vue Multiselect - A custom selection solution for Vue JS.\"\n                )\n              ]),\n              _c(\"div\", { staticClass: \"row\" }, [\n                _c(\"div\", { staticClass: \"col-xl-6 col-sm-6\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group mt-3 mt-sm-0\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"default\" } }, [\n                        _vm._v(\"Default\")\n                      ]),\n                      _c(\"multiselect\", {\n                        attrs: { options: _vm.options },\n                        model: {\n                          value: _vm.value,\n                          callback: function($$v) {\n                            _vm.value = $$v\n                          },\n                          expression: \"value\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ]),\n                _c(\"div\", { staticClass: \"col-xl-6 col-sm-6\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group mt-3 mt-sm-0\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"default\" } }, [\n                        _vm._v(\"Multiple select\")\n                      ]),\n                      _c(\"multiselect\", {\n                        attrs: { options: _vm.options, multiple: true },\n                        model: {\n                          value: _vm.value1,\n                          callback: function($$v) {\n                            _vm.value1 = $$v\n                          },\n                          expression: \"value1\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                ])\n              ])\n            ])\n          ])\n        ])\n      ]),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card-box\" }, [\n            _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n              _vm._v(\"Flatpickr - Date picker\")\n            ]),\n            _c(\"p\", { staticClass: \"sub-header\" }, [\n              _vm._v(\"Examples of date and time pickers\")\n            ]),\n            _c(\"div\", [\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"Basic\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: { placeholder: \"Basic datepicker\", name: \"date\" },\n                    model: {\n                      value: _vm.date,\n                      callback: function($$v) {\n                        _vm.date = $$v\n                      },\n                      expression: \"date\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"Date & Time\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: {\n                      config: _vm.dateTimePicker,\n                      placeholder: \"Date and Time\"\n                    },\n                    model: {\n                      value: _vm.dateTime,\n                      callback: function($$v) {\n                        _vm.dateTime = $$v\n                      },\n                      expression: \"dateTime\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"Human-friendly Dates\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: { config: _vm.wrap, placeholder: \"October 9, 2018\" },\n                    model: {\n                      value: _vm.humanFriendly,\n                      callback: function($$v) {\n                        _vm.humanFriendly = $$v\n                      },\n                      expression: \"humanFriendly\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"MinDate and MaxDate\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: {\n                      config: _vm.minmax,\n                      placeholder: \"mindate - maxdate\"\n                    },\n                    model: {\n                      value: _vm.min,\n                      callback: function($$v) {\n                        _vm.min = $$v\n                      },\n                      expression: \"min\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"Inline Calendar\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: { config: _vm.inline },\n                    model: {\n                      value: _vm.inlinepicker,\n                      callback: function($$v) {\n                        _vm.inlinepicker = $$v\n                      },\n                      expression: \"inlinepicker\"\n                    }\n                  })\n                ],\n                1\n              )\n            ])\n          ])\n        ]),\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\"div\", { staticClass: \"card-body\" }, [\n              _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n                _vm._v(\"Flatpickr - Time Picker\")\n              ]),\n              _c(\"p\", { staticClass: \"sub-header\" }, [\n                _vm._v(\"A lightweight and powerful time picker\")\n              ]),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"Basic\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: {\n                      config: _vm.timePicker,\n                      placeholder: \"Basic timepicker\"\n                    },\n                    model: {\n                      value: _vm.time,\n                      callback: function($$v) {\n                        _vm.time = $$v\n                      },\n                      expression: \"time\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"24-hour Time Picker\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: { config: _vm.format, placeholder: \"16:21\" },\n                    model: {\n                      value: _vm.format24,\n                      callback: function($$v) {\n                        _vm.format24 = $$v\n                      },\n                      expression: \"format24\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"Time Picker w/ Limits\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: { config: _vm.timelimit, placeholder: \"Limits\" },\n                    model: {\n                      value: _vm.limit,\n                      callback: function($$v) {\n                        _vm.limit = $$v\n                      },\n                      expression: \"limit\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"form-group mb-3\" },\n                [\n                  _c(\"label\", [_vm._v(\"Preloading Time\")]),\n                  _c(\"flat-pickr\", {\n                    staticClass: \"form-control\",\n                    attrs: { config: _vm.preload, placeholder: \"Pick a time\" },\n                    model: {\n                      value: _vm.loadtime,\n                      callback: function($$v) {\n                        _vm.loadtime = $$v\n                      },\n                      expression: \"loadtime\"\n                    }\n                  })\n                ],\n                1\n              )\n            ])\n          ])\n        ])\n      ]),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card-box\" }, [\n            _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n              _vm._v(\"Input Masks\")\n            ]),\n            _c(\"p\", { staticClass: \"sub-header\" }, [\n              _vm._v(\n                \"\\n          A simple masking for multiple types of input\\n        \"\n              )\n            ]),\n            _c(\"div\", { staticClass: \"row\" }, [\n              _c(\"div\", { staticClass: \"col-md-6\" }, [\n                _c(\"form\", { attrs: { action: \"#\" } }, [\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Date\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.datemask,\n                          expression: \"datemask\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"##/##/####\",\n                          expression: \"'##/##/####'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.datemask },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.datemask = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"DD/MM/YYYY\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Hour\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.hour,\n                          expression: \"hour\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"##:##:##\",\n                          expression: \"'##:##:##'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.hour },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.hour = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"HH:MM:SS\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Date & Hour\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.datetime,\n                          expression: \"datetime\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"##/##/#### ##:##:##\",\n                          expression: \"'##/##/#### ##:##:##'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.datetime },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.datetime = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"DD/MM/YYYY HH:MM:SS\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"ZIP Code\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.zipcode,\n                          expression: \"zipcode\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"#####-###\",\n                          expression: \"'#####-###'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.zipcode },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.zipcode = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"xxxxx-xxx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Crazy Zip Code\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.crazyzip,\n                          expression: \"crazyzip\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"#-##-##-##\",\n                          expression: \"'#-##-##-##'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.crazyzip },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.crazyzip = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"x-xx-xx-xx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Money\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.money,\n                          expression: \"money\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"###.###.###.###.###,##\",\n                          expression: \"'###.###.###.###.###,##'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.money },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.money = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"Your money\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"4 digit Group\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.digit,\n                          expression: \"digit\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"#,####,####,####\",\n                          expression: \"'#,####,####,####'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.digit },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.digit = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g. \"x,xxxx,xxxx,xxxx\"')\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\"div\", { staticClass: \"col-md-6\" }, [\n                _c(\"form\", { attrs: { action: \"#\" } }, [\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Telephone\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.telephone,\n                          expression: \"telephone\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"####-####\",\n                          expression: \"'####-####'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.telephone },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.telephone = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"xxxx-xxxx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Telephone with Code Area\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.areacode,\n                          expression: \"areacode\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"(##) ####-####\",\n                          expression: \"'(##) ####-####'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.areacode },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.areacode = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"(xx) xxxx-xxxx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"US Telephone\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.ustelephone,\n                          expression: \"ustelephone\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"(###) ###-####\",\n                          expression: \"'(###) ###-####'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.ustelephone },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.ustelephone = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"(xxx) xxx-xxxx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"São Paulo Celphones\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.celphone,\n                          expression: \"celphone\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"(##) #####-####\",\n                          expression: \"'(##) #####-####'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.celphone },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.celphone = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"(xx) xxxxx-xxxx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"CPF\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.cpf,\n                          expression: \"cpf\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"###.###.###-##\",\n                          expression: \"'###.###.###-##'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.cpf },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.cpf = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"xxx.xxx.xxxx-xx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"CNPJ\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.cnpj,\n                          expression: \"cnpj\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"##.###.###/####-##\",\n                          expression: \"'##.###.###/####-##'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.cnpj },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.cnpj = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"xx.xxx.xxx/xxxx-xx\"')\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"IP Address\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.ipaddress,\n                          expression: \"ipaddress\"\n                        },\n                        {\n                          name: \"mask\",\n                          rawName: \"v-mask\",\n                          value: \"###.###.###.###\",\n                          expression: \"'###.###.###.###'\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      attrs: { type: \"text\" },\n                      domProps: { value: _vm.ipaddress },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.ipaddress = $event.target.value\n                        }\n                      }\n                    }),\n                    _c(\"span\", { staticClass: \"font-13 text-muted\" }, [\n                      _vm._v('e.g \"xxx.xxx.xxx.xxx\"')\n                    ])\n                  ])\n                ])\n              ])\n            ])\n          ])\n        ]),\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\"div\", { staticClass: \"card-body\" }, [\n              _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n                _vm._v(\"MaxLength\")\n              ]),\n              _c(\"p\", { staticClass: \"sub-header\" }, [\n                _vm._v('Uses the HTML5 attribute \"maxlength\" to work.')\n              ]),\n              _c(\n                \"label\",\n                { staticClass: \"mb-1 font-weight-medium text-muted\" },\n                [_vm._v(\"Default usage\")]\n              ),\n              _c(\"p\", { staticClass: \"text-muted font-13\" }, [\n                _vm._v(\n                  \"The badge will show up by default when the remaining chars are 10\\n            or less:\"\n                )\n              ]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.maxlen,\n                    expression: \"maxlen\"\n                  }\n                ],\n                staticClass: \"form-control\",\n                attrs: { type: \"text\", maxlength: 10 },\n                domProps: { value: _vm.maxlen },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.maxlen = $event.target.value\n                  }\n                }\n              }),\n              _vm.maxlen\n                ? _c(\"div\", { staticClass: \"text-center\" }, [\n                    _c(\n                      \"p\",\n                      {\n                        staticClass: \"badge position-absolute\",\n                        class: {\n                          \"badge-success\": _vm.maxlen.length !== 10,\n                          \"badge-danger\": _vm.maxlen.length === 10\n                        }\n                      },\n                      [_vm._v(_vm._s(_vm.maxlen.length) + \" / 10\")]\n                    )\n                  ])\n                : _vm._e(),\n              _c(\"div\", [\n                _c(\n                  \"label\",\n                  { staticClass: \"mb-1 mt-3 font-weight-medium text-muted\" },\n                  [_vm._v(\"Threshold value\")]\n                ),\n                _c(\"p\", { staticClass: \"text-muted font-13\" }, [\n                  _vm._v(\n                    \"\\n              Do you want the badge to show up when there are 20 chars or\\n              less? Use the\\n              \"\n                  ),\n                  _c(\"code\", [_vm._v(\"threshold\")]),\n                  _vm._v(\"\\n              option:\\n            \")\n                ]),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.data,\n                      expression: \"data\"\n                    }\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: { type: \"text\", maxlength: 25 },\n                  domProps: { value: _vm.data },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.data = $event.target.value\n                    }\n                  }\n                }),\n                _c(\"div\", { staticClass: \"text-center\" }, [\n                  _vm.data\n                    ? _c(\n                        \"p\",\n                        {\n                          staticClass: \"badge position-absolute\",\n                          class: {\n                            \"badge-success\": _vm.data.length !== 25,\n                            \"badge-danger\": _vm.data.length === 25\n                          }\n                        },\n                        [_vm._v(_vm._s(_vm.data.length) + \" / 25\")]\n                      )\n                    : _vm._e()\n                ])\n              ]),\n              _c(\"div\", [\n                _c(\n                  \"label\",\n                  { staticClass: \"mb-1 mt-3 font-weight-medium text-muted\" },\n                  [_vm._v(\"All the options\")]\n                ),\n                _c(\"p\", { staticClass: \"text-muted font-13\" }, [\n                  _vm._v(\"\\n              Please note: if the\\n              \"),\n                  _c(\"code\", [_vm._v(\"alwaysShow\")]),\n                  _vm._v(\" option is enabled, the\\n              \"),\n                  _c(\"code\", [_vm._v(\"threshold\")]),\n                  _vm._v(\" option is ignored.\\n            \")\n                ]),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.option,\n                      expression: \"option\"\n                    }\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: { type: \"text\", maxlength: 25 },\n                  domProps: { value: _vm.option },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.option = $event.target.value\n                    }\n                  }\n                }),\n                _c(\"div\", { staticClass: \"text-center\" }, [\n                  _vm.option\n                    ? _c(\n                        \"p\",\n                        {\n                          staticClass: \"badge position-absolute\",\n                          class: {\n                            \"badge-success\": _vm.option.length !== 25,\n                            \"badge-danger\": _vm.option.length === 25\n                          }\n                        },\n                        [\n                          _vm._v(\n                            \"\\n                You typed\\n                \" +\n                              _vm._s(_vm.option.length) +\n                              \" out of 25 chars available.\\n              \"\n                          )\n                        ]\n                      )\n                    : _vm._e()\n                ])\n              ]),\n              _c(\"div\", [\n                _c(\n                  \"label\",\n                  { staticClass: \"mb-1 mt-3 font-weight-medium text-muted\" },\n                  [_vm._v(\"Textareas\")]\n                ),\n                _c(\"p\", { staticClass: \"text-muted font-13\" }, [\n                  _vm._v(\n                    \"Bootstrap maxlength supports textarea as well as inputs. Even\\n              on old IE.\"\n                  )\n                ]),\n                _c(\"textarea\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.textarea,\n                      expression: \"textarea\"\n                    }\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    maxlength: 225,\n                    rows: \"3\",\n                    placeholder: \"This textarea has a limit of 225 chars.\"\n                  },\n                  domProps: { value: _vm.textarea },\n                  on: {\n                    input: function($event) {\n                      if ($event.target.composing) {\n                        return\n                      }\n                      _vm.textarea = $event.target.value\n                    }\n                  }\n                }),\n                _c(\"div\", { staticClass: \"text-center\" }, [\n                  _vm.textarea\n                    ? _c(\n                        \"p\",\n                        {\n                          staticClass: \"badge position-absolute\",\n                          class: {\n                            \"badge-success\": _vm.textarea.length !== 225,\n                            \"badge-danger\": _vm.textarea.length === 225\n                          }\n                        },\n                        [\n                          _vm._v(\n                            \"\\n                \" +\n                              _vm._s(_vm.textarea.length) +\n                              \" / 225\\n              \"\n                          )\n                        ]\n                      )\n                    : _vm._e()\n                ])\n              ])\n            ])\n          ])\n        ])\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}