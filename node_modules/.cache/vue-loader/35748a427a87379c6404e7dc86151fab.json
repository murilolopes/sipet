{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/murilo/code/murilo/sipet/src/router/views/pages/ui/forms/validation.vue?vue&type=template&id=022b569b&","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/router/views/pages/ui/forms/validation.vue","mtime":1573759128000},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1583949852838},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js","mtime":1583949852838}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"Layout\",\n    [\n      _c(\"PageHeader\", { attrs: { title: _vm.title, items: _vm.items } }),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\"div\", { staticClass: \"card-body\" }, [\n              _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n                _vm._v(\"Basic Form\")\n              ]),\n              _c(\"p\", { staticClass: \"sub-header\" }, [\n                _vm._v(\n                  \"Vuelidate is a validation library in Vue. It helps you provide\\n            your users with feedback on their form submission before sending\\n            it to your server.\"\n                )\n              ]),\n              _c(\n                \"form\",\n                {\n                  on: {\n                    submit: function($event) {\n                      $event.preventDefault()\n                      return _vm.handleSubmit($event)\n                    }\n                  }\n                },\n                [\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", { attrs: { for: \"name\" } }, [\n                      _vm._v(\"\\n                User Name\\n                \"),\n                      _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n                    ]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.form.name,\n                          expression: \"form.name\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      class: {\n                        \"is-invalid\": _vm.submitted && _vm.$v.form.name.$error\n                      },\n                      attrs: {\n                        id: \"username\",\n                        name: \"username\",\n                        type: \"text\",\n                        placeholder: \"Enter user name\"\n                      },\n                      domProps: { value: _vm.form.name },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(_vm.form, \"name\", $event.target.value)\n                        }\n                      }\n                    }),\n                    _vm.submitted && !_vm.$v.form.name.required\n                      ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                          _vm._v(\"This value is required.\")\n                        ])\n                      : _vm._e()\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [\n                      _vm._v(\n                        \"\\n                Email address\\n                \"\n                      ),\n                      _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n                    ]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.form.email,\n                          expression: \"form.email\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      class: {\n                        \"is-invalid\": _vm.submitted && _vm.$v.form.email.$error\n                      },\n                      attrs: {\n                        type: \"email\",\n                        name: \"email\",\n                        placeholder: \"Enter email\"\n                      },\n                      domProps: { value: _vm.form.email },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(_vm.form, \"email\", $event.target.value)\n                        }\n                      }\n                    }),\n                    _vm.submitted && _vm.$v.form.email.$error\n                      ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                          !_vm.$v.form.email.required\n                            ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                            : _vm._e(),\n                          !_vm.$v.form.email.email\n                            ? _c(\"span\", [\n                                _vm._v(\"This value should be a valid email.\")\n                              ])\n                            : _vm._e()\n                        ])\n                      : _vm._e()\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [\n                      _vm._v(\"\\n                Password\\n                \"),\n                      _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n                    ]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.form.password,\n                          expression: \"form.password\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      class: {\n                        \"is-invalid\":\n                          _vm.submitted && _vm.$v.form.password.$error\n                      },\n                      attrs: {\n                        type: \"password\",\n                        name: \"password\",\n                        placeholder: \"Password\"\n                      },\n                      domProps: { value: _vm.form.password },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(_vm.form, \"password\", $event.target.value)\n                        }\n                      }\n                    }),\n                    _vm.submitted && _vm.$v.form.password.$error\n                      ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                          !_vm.$v.form.password.required\n                            ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                            : _vm._e(),\n                          !_vm.$v.form.password.minLength\n                            ? _c(\"span\", [\n                                _vm._v(\n                                  \"Password must be at least 6 characters.\"\n                                )\n                              ])\n                            : _vm._e()\n                        ])\n                      : _vm._e()\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", { attrs: { for: \"passWord2\" } }, [\n                      _vm._v(\n                        \"\\n                Confirm Password\\n                \"\n                      ),\n                      _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n                    ]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.form.confirmPassword,\n                          expression: \"form.confirmPassword\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      class: {\n                        \"is-invalid\":\n                          _vm.submitted && _vm.$v.form.confirmPassword.$error\n                      },\n                      attrs: {\n                        id: \"passWord2\",\n                        type: \"password\",\n                        name: \"confirmPassword\",\n                        placeholder: \"Password\"\n                      },\n                      domProps: { value: _vm.form.confirmPassword },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(\n                            _vm.form,\n                            \"confirmPassword\",\n                            $event.target.value\n                          )\n                        }\n                      }\n                    }),\n                    _vm.submitted && _vm.$v.form.confirmPassword.$error\n                      ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                          !_vm.$v.form.confirmPassword.required\n                            ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                            : !_vm.$v.form.confirmPassword.sameAsPassword\n                            ? _c(\"span\", [\n                                _vm._v(\"This value should be the same.\")\n                              ])\n                            : _vm._e()\n                        ])\n                      : _vm._e()\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"div\", { staticClass: \"checkbox checkbox-purple\" }, [\n                      _c(\"input\", {\n                        attrs: { id: \"checkbox6a\", type: \"checkbox\" }\n                      }),\n                      _c(\"label\", { attrs: { for: \"checkbox6a\" } }, [\n                        _vm._v(\"Remember me\")\n                      ])\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group text-right m-b-0\" }, [\n                    _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-primary\",\n                        attrs: { type: \"submit\" }\n                      },\n                      [_vm._v(\"Submit\")]\n                    ),\n                    _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-secondary m-l-5 ml-1\",\n                        attrs: { type: \"reset\" }\n                      },\n                      [_vm._v(\"Cancel\")]\n                    )\n                  ])\n                ]\n              )\n            ])\n          ])\n        ]),\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\"div\", { staticClass: \"card-body\" }, [\n              _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n                _vm._v(\"Horizontal Form\")\n              ]),\n              _c(\"p\", { staticClass: \"text-muted font-14 m-b-20\" }, [\n                _vm._v(\n                  \"Vuelidate is a validation library in Vue. It helps you provide\\n            your users with feedback on their form submission before sending\\n            it to your server.\"\n                )\n              ]),\n              _c(\n                \"form\",\n                {\n                  on: {\n                    submit: function($event) {\n                      $event.preventDefault()\n                      return _vm.horizontalForm($event)\n                    }\n                  }\n                },\n                [\n                  _c(\"div\", { staticClass: \"form-group row\" }, [\n                    _c(\"label\", { staticClass: \"col-4 col-form-label\" }, [\n                      _vm._v(\"\\n                Email\\n                \"),\n                      _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n                    ]),\n                    _c(\"div\", { staticClass: \"col-7\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.horizontal.email,\n                            expression: \"horizontal.email\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.formsubmit && _vm.$v.horizontal.email.$error\n                        },\n                        attrs: {\n                          type: \"email\",\n                          name: \"email\",\n                          placeholder: \"Enter email\"\n                        },\n                        domProps: { value: _vm.horizontal.email },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.horizontal,\n                              \"email\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.formsubmit && _vm.$v.horizontal.email.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.horizontal.email.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.horizontal.email.email\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be a valid email.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group row\" }, [\n                    _c(\"label\", { staticClass: \"col-4 col-form-label\" }, [\n                      _vm._v(\"\\n                Password\\n                \"),\n                      _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n                    ]),\n                    _c(\"div\", { staticClass: \"col-7\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.horizontal.password,\n                            expression: \"horizontal.password\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.formsubmit && _vm.$v.horizontal.password.$error\n                        },\n                        attrs: {\n                          type: \"password\",\n                          name: \"password\",\n                          placeholder: \"Password\"\n                        },\n                        domProps: { value: _vm.horizontal.password },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.horizontal,\n                              \"password\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.formsubmit && _vm.$v.horizontal.password.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.horizontal.password.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.horizontal.password.minLength\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"Password must be at least 6 characters.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group row\" }, [\n                    _c(\"label\", { staticClass: \"col-4 col-form-label\" }, [\n                      _vm._v(\n                        \"\\n                Confirm Password\\n                \"\n                      ),\n                      _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n                    ]),\n                    _c(\"div\", { staticClass: \"col-7\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.horizontal.confirmPassword,\n                            expression: \"horizontal.confirmPassword\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.formsubmit &&\n                            _vm.$v.horizontal.confirmPassword.$error\n                        },\n                        attrs: {\n                          type: \"password\",\n                          name: \"confirmPassword\",\n                          placeholder: \"Password\"\n                        },\n                        domProps: { value: _vm.horizontal.confirmPassword },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.horizontal,\n                              \"confirmPassword\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.formsubmit && _vm.$v.horizontal.confirmPassword.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.horizontal.confirmPassword.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : !_vm.$v.horizontal.confirmPassword\n                                  .sameAsPassword\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be the same.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group row\" }, [\n                    _c(\n                      \"label\",\n                      {\n                        staticClass: \"col-4 col-form-label\",\n                        attrs: { for: \"webSite\" }\n                      },\n                      [\n                        _vm._v(\"\\n                Web Site\\n                \"),\n                        _c(\"span\", { staticClass: \"text-danger\" }, [\n                          _vm._v(\"*\")\n                        ])\n                      ]\n                    ),\n                    _c(\"div\", { staticClass: \"col-7\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.horizontal.website,\n                            expression: \"horizontal.website\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.formsubmit && _vm.$v.horizontal.website.$error\n                        },\n                        attrs: {\n                          id: \"website\",\n                          type: \"text\",\n                          name: \"website\",\n                          placeholder: \"URL\"\n                        },\n                        domProps: { value: _vm.horizontal.website },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.horizontal,\n                              \"website\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.formsubmit && _vm.$v.horizontal.website.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.horizontal.website.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.horizontal.website.url\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be a valid url.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group row\" }, [\n                    _c(\"div\", { staticClass: \"col-8 offset-4\" }, [\n                      _c(\"div\", { staticClass: \"checkbox checkbox-purple\" }, [\n                        _c(\"input\", {\n                          attrs: { id: \"checkbox6\", type: \"checkbox\" }\n                        }),\n                        _c(\"label\", { attrs: { for: \"checkbox6\" } }, [\n                          _vm._v(\"Remember me\")\n                        ])\n                      ])\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group row\" }, [\n                    _c(\"div\", { staticClass: \"col-8 offset-4\" }, [\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-primary\",\n                          attrs: { type: \"submit\" }\n                        },\n                        [_vm._v(\"Register\")]\n                      ),\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-secondary m-l-5 ml-1\",\n                          attrs: { type: \"reset\" }\n                        },\n                        [_vm._v(\"Cancel\")]\n                      )\n                    ])\n                  ])\n                ]\n              )\n            ])\n          ])\n        ])\n      ]),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\"div\", { staticClass: \"card-box\" }, [\n              _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n                _vm._v(\"Validation type\")\n              ]),\n              _c(\"p\", { staticClass: \"text-muted font-14 m-b-20\" }, [\n                _vm._v(\n                  \"Vuelidate is a validation library in Vue. It helps you provide\\n            your users with feedback on their form submission before sending\\n            it to your server.\"\n                )\n              ]),\n              _c(\n                \"form\",\n                {\n                  attrs: { action: \"#\" },\n                  on: {\n                    submit: function($event) {\n                      $event.preventDefault()\n                      return _vm.typeForm($event)\n                    }\n                  }\n                },\n                [\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Required\")]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.typeform.name,\n                          expression: \"typeform.name\"\n                        }\n                      ],\n                      staticClass: \"form-control\",\n                      class: {\n                        \"is-invalid\":\n                          _vm.typesubmit && _vm.$v.typeform.name.$error\n                      },\n                      attrs: {\n                        type: \"text\",\n                        placeholder: \"Type something\",\n                        name: \"name\"\n                      },\n                      domProps: { value: _vm.typeform.name },\n                      on: {\n                        input: function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.$set(_vm.typeform, \"name\", $event.target.value)\n                        }\n                      }\n                    }),\n                    _vm.typesubmit && _vm.$v.typeform.name.$error\n                      ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                          !_vm.$v.typeform.name.required\n                            ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                            : _vm._e()\n                        ])\n                      : _vm._e()\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Equal To\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.password,\n                            expression: \"typeform.password\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit && _vm.$v.typeform.password.$error\n                        },\n                        attrs: {\n                          type: \"password\",\n                          name: \"password\",\n                          placeholder: \"Password\"\n                        },\n                        domProps: { value: _vm.typeform.password },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.typeform,\n                              \"password\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.password.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.password.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.typeform.password.minLength\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"Password must be at least 6 characters.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ]),\n                    _c(\"div\", { staticClass: \"mt-2\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.confirmPassword,\n                            expression: \"typeform.confirmPassword\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit &&\n                            _vm.$v.typeform.confirmPassword.$error\n                        },\n                        attrs: {\n                          type: \"password\",\n                          name: \"confirmPassword\",\n                          placeholder: \"Password\"\n                        },\n                        domProps: { value: _vm.typeform.confirmPassword },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.typeform,\n                              \"confirmPassword\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.confirmPassword.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.confirmPassword.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : !_vm.$v.typeform.confirmPassword.sameAsPassword\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be the same.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"E-Mail\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.email,\n                            expression: \"typeform.email\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit && _vm.$v.typeform.email.$error\n                        },\n                        attrs: {\n                          type: \"email\",\n                          name: \"email\",\n                          placeholder: \"Enter a valid email\"\n                        },\n                        domProps: { value: _vm.typeform.email },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.typeform, \"email\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.email.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.email.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.typeform.email.email\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be a valid email.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"URL\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.url,\n                            expression: \"typeform.url\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit && _vm.$v.typeform.url.$error\n                        },\n                        attrs: { type: \"url\", name: \"url\", placeholder: \"URL\" },\n                        domProps: { value: _vm.typeform.url },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.typeform, \"url\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.url.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.url.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.typeform.url.url\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be a valid url.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Digits\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.digit,\n                            expression: \"typeform.digit\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit && _vm.$v.typeform.digit.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"digit\",\n                          placeholder: \"Enter only digits\"\n                        },\n                        domProps: { value: _vm.typeform.digit },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.typeform, \"digit\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.digit.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.digit.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.typeform.digit.numeric\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be digits.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Number\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.number,\n                            expression: \"typeform.number\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit && _vm.$v.typeform.number.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"number\",\n                          placeholder: \"Enter only numbers\"\n                        },\n                        domProps: { value: _vm.typeform.number },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.typeform,\n                              \"number\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.number.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.number.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.typeform.number.numeric\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be a valid number.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Alphanumeric\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.alphanum,\n                            expression: \"typeform.alphanum\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit && _vm.$v.typeform.alphanum.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"alphanum\",\n                          placeholder: \"Enter alphanumeric value\"\n                        },\n                        domProps: { value: _vm.typeform.alphanum },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.typeform,\n                              \"alphanum\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.alphanum.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.alphanum.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.typeform.alphanum.alphaNum\n                              ? _c(\"span\", [\n                                  _vm._v(\"This value should be alphanumeric.\")\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Textarea\")]),\n                    _c(\"div\", [\n                      _c(\"textarea\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.typeform.textarea,\n                            expression: \"typeform.textarea\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.typesubmit && _vm.$v.typeform.textarea.$error\n                        },\n                        attrs: { name: \"textarea\" },\n                        domProps: { value: _vm.typeform.textarea },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.typeform,\n                              \"textarea\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.typesubmit && _vm.$v.typeform.textarea.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.typeform.textarea.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group mb-0\" }, [\n                    _c(\"div\", [\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-primary\",\n                          attrs: { type: \"submit\" }\n                        },\n                        [_vm._v(\"Submit\")]\n                      ),\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-secondary m-l-5 ml-1\",\n                          attrs: { type: \"reset\" }\n                        },\n                        [_vm._v(\"Cancel\")]\n                      )\n                    ])\n                  ])\n                ]\n              )\n            ])\n          ])\n        ]),\n        _c(\"div\", { staticClass: \"col-lg-6\" }, [\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\"div\", { staticClass: \"card-body\" }, [\n              _c(\"h4\", { staticClass: \"header-title mt-0 mb-1\" }, [\n                _vm._v(\"Range validation\")\n              ]),\n              _c(\"p\", { staticClass: \"text-muted font-14 m-b-20\" }, [\n                _vm._v(\n                  \"Vuelidate is a validation library in Vue. It helps you provide\\n            your users with feedback on their form submission before sending\\n            it to your server.\"\n                )\n              ]),\n              _c(\n                \"form\",\n                {\n                  attrs: { action: \"#\" },\n                  on: {\n                    submit: function($event) {\n                      $event.preventDefault()\n                      return _vm.rangeform($event)\n                    }\n                  }\n                },\n                [\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Min Length\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.range.minlen,\n                            expression: \"range.minlen\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\": _vm.submit && _vm.$v.range.minlen.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"minlen\",\n                          placeholder: \"Min 6 chars.\"\n                        },\n                        domProps: { value: _vm.range.minlen },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.range, \"minlen\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.submit && _vm.$v.range.minlen.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.range.minlen.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.range.minlen.minLength\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value is too short. It should have 6 characters or\\n                    more.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Max Length\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.range.maxlength,\n                            expression: \"range.maxlength\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.submit && _vm.$v.range.maxlength.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"maxlength\",\n                          placeholder: \"Max 6 chars.\"\n                        },\n                        domProps: { value: _vm.range.maxlength },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.range,\n                              \"maxlength\",\n                              $event.target.value\n                            )\n                          }\n                        }\n                      }),\n                      _vm.submit && _vm.$v.range.maxlength.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.range.maxlength.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.range.maxlength.maxLength\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value is too long. It should have 6 characters or\\n                    fewer.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Range Length\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.range.between,\n                            expression: \"range.between\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.submit && _vm.$v.range.between.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"between\",\n                          placeholder: \"Text between 5 - 10 chars length\"\n                        },\n                        domProps: { value: _vm.range.between },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.range, \"between\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.submit && _vm.$v.range.between.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.range.between.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.range.between.maxLength\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value length is invalid. It should be between 5 and\\n                    10 characters long.\"\n                                  )\n                                ])\n                              : _vm._e(),\n                            !_vm.$v.range.between.minLength\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value length is invalid. It should be between 5 and\\n                    10 characters long.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Min Value\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.range.minval,\n                            expression: \"range.minval\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\": _vm.submit && _vm.$v.range.minval.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"minval\",\n                          placeholder: \"Min value is 6\"\n                        },\n                        domProps: { value: _vm.range.minval },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.range, \"minval\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.submit && _vm.$v.range.minval.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.range.minval.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.range.minval.minValue\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value should be greater than or equal to 6.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Max Value\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.range.maxval,\n                            expression: \"range.maxval\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\": _vm.submit && _vm.$v.range.maxval.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"maxval\",\n                          placeholder: \"Max value is 6\"\n                        },\n                        domProps: { value: _vm.range.maxval },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.range, \"maxval\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.submit && _vm.$v.range.maxval.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.range.maxval.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.range.maxval.maxValue\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value should be lower than or equal to 6.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Range Value\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.range.rangeval,\n                            expression: \"range.rangeval\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\":\n                            _vm.submit && _vm.$v.range.rangeval.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"rangeval\",\n                          placeholder: \"Number between 6 - 100\"\n                        },\n                        domProps: { value: _vm.range.rangeval },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.range, \"rangeval\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.submit && _vm.$v.range.rangeval.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.range.rangeval.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e(),\n                            !_vm.$v.range.rangeval.minValue\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value should be between 6 and 100.\"\n                                  )\n                                ])\n                              : _vm._e(),\n                            !_vm.$v.range.rangeval.maxValue\n                              ? _c(\"span\", [\n                                  _vm._v(\n                                    \"This value should be between 6 and 100.\"\n                                  )\n                                ])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _c(\"label\", [_vm._v(\"Regular Exp\")]),\n                    _c(\"div\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.range.expr,\n                            expression: \"range.expr\"\n                          }\n                        ],\n                        staticClass: \"form-control\",\n                        class: {\n                          \"is-invalid\": _vm.submit && _vm.$v.range.expr.$error\n                        },\n                        attrs: {\n                          type: \"text\",\n                          name: \"expr\",\n                          placeholder: \"Hex. Color\"\n                        },\n                        domProps: { value: _vm.range.expr },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(_vm.range, \"expr\", $event.target.value)\n                          }\n                        }\n                      }),\n                      _vm.submit && _vm.$v.range.expr.$error\n                        ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                            !_vm.$v.range.expr.required\n                              ? _c(\"span\", [_vm._v(\"This value is required.\")])\n                              : _vm._e()\n                          ])\n                        : _vm._e()\n                    ])\n                  ]),\n                  _c(\"div\", { staticClass: \"form-group mb-0\" }, [\n                    _c(\"div\", [\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-primary\",\n                          attrs: { type: \"submit\" }\n                        },\n                        [_vm._v(\"Submit\")]\n                      ),\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-secondary m-l-5 ml-1\",\n                          attrs: { type: \"reset\" }\n                        },\n                        [_vm._v(\"Cancel\")]\n                      )\n                    ])\n                  ])\n                ]\n              )\n            ])\n          ])\n        ])\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}