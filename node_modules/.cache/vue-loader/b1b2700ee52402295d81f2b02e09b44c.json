{"remainingRequest":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/murilo/code/murilo/sipet/src/sales/router/views/pages/ui/forms/wizard/step2.vue?vue&type=template&id=0655c3c7&","dependencies":[{"path":"/home/murilo/code/murilo/sipet/src/sales/router/views/pages/ui/forms/wizard/step2.vue","mtime":1584205434035},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1583949852838},{"path":"/home/murilo/code/murilo/sipet/node_modules/cache-loader/dist/cjs.js","mtime":1583949852443},{"path":"/home/murilo/code/murilo/sipet/node_modules/vue-loader/lib/index.js","mtime":1583949852838}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"row\" }, [\n      _c(\n        \"div\",\n        { staticClass: \"col-12 col-md-6\" },\n        [\n          _c(\n            \"b-form-group\",\n            {\n              class: { \"has-error\": _vm.$v.pet.name.$error },\n              attrs: { \"label-for\": \"name\" }\n            },\n            [\n              _c(\"label\", [\n                _vm._v(\" Nome \"),\n                _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n              ]),\n              _c(\"b-form-input\", {\n                class: { \"is-invalid\": _vm.$v.pet.name.$error },\n                attrs: { id: \"petName\" },\n                model: {\n                  value: _vm.pet.name,\n                  callback: function($$v) {\n                    _vm.$set(_vm.pet, \"name\", $$v)\n                  },\n                  expression: \"pet.name\"\n                }\n              }),\n              _vm.$v.pet.name.$error && !_vm.$v.pet.name.required\n                ? _c(\"span\", { staticClass: \"help-block invalid-feedback\" }, [\n                    _vm._v(\"\\n          Este campo é obrigatório\\n        \")\n                  ])\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-12 col-md-6\" },\n        [\n          _c(\n            \"b-form-group\",\n            {\n              class: { \"has-error\": _vm.$v.pet.species.$error },\n              attrs: { \"label-for\": \"species\" }\n            },\n            [\n              _c(\"label\", [\n                _vm._v(\" Espécie \"),\n                _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n              ]),\n              _c(\"multiselect\", {\n                class: { \"is-invalid\": _vm.$v.pet.species.$error },\n                attrs: {\n                  \"track-by\": \"label\",\n                  label: \"label\",\n                  options: _vm.species,\n                  selectLabel: \"\",\n                  placeholder: \"\",\n                  selectedLabel: \"Selecionado\",\n                  deselectLabel: \"Remover\"\n                },\n                model: {\n                  value: _vm.pet.species,\n                  callback: function($$v) {\n                    _vm.$set(_vm.pet, \"species\", $$v)\n                  },\n                  expression: \"pet.species\"\n                }\n              }),\n              _vm.$v.pet.species.$error\n                ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                    !_vm.$v.pet.species.required\n                      ? _c(\"span\", [_vm._v(\"Este campo é obrigatório.\")])\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-12 col-md-6\" },\n        [\n          _c(\n            \"b-form-group\",\n            {\n              class: { \"has-error\": _vm.$v.pet.breed.$error },\n              attrs: { \"label-for\": \"breed\" }\n            },\n            [\n              _c(\"label\", [\n                _vm._v(\" Raça \"),\n                _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n              ]),\n              _c(\n                \"multiselect\",\n                {\n                  class: { \"is-invalid\": _vm.$v.pet.breed.$error },\n                  attrs: {\n                    options: _vm.filtered_breeds,\n                    selectLabel: \"\",\n                    placeholder: \"\",\n                    selectedLabel: \"Selecionado\",\n                    deselectLabel: \"Remover\"\n                  },\n                  model: {\n                    value: _vm.pet.breed,\n                    callback: function($$v) {\n                      _vm.$set(_vm.pet, \"breed\", $$v)\n                    },\n                    expression: \"pet.breed\"\n                  }\n                },\n                [\n                  _c(\n                    \"span\",\n                    { attrs: { slot: \"noOptions\" }, slot: \"noOptions\" },\n                    [_vm._v(\"Selecione uma Espécie\")]\n                  )\n                ]\n              ),\n              _vm.$v.pet.breed.$error\n                ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                    !_vm.$v.pet.breed.required\n                      ? _c(\"span\", [\n                          _vm._v(\n                            \"\\n            Esse campo é obrigatório.\\n          \"\n                          )\n                        ])\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-12 col-md-6\" },\n        [\n          _c(\n            \"b-form-group\",\n            {\n              class: { \"has-error\": _vm.$v.pet.gender.$error },\n              attrs: { \"label-for\": \"genders\" }\n            },\n            [\n              _c(\"label\", [\n                _vm._v(\" Gênero \"),\n                _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n              ]),\n              _c(\"multiselect\", {\n                class: { \"is-invalid\": _vm.$v.pet.gender.$error },\n                attrs: {\n                  \"track-by\": \"label\",\n                  label: \"label\",\n                  selectLabel: \"\",\n                  placeholder: \"\",\n                  selectedLabel: \"Selecionado\",\n                  deselectLabel: \"Remover\",\n                  options: _vm.genders\n                },\n                model: {\n                  value: _vm.pet.gender,\n                  callback: function($$v) {\n                    _vm.$set(_vm.pet, \"gender\", $$v)\n                  },\n                  expression: \"pet.gender\"\n                }\n              }),\n              _vm.$v.pet.gender.$error\n                ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                    !_vm.$v.pet.gender.required\n                      ? _c(\"span\", [\n                          _vm._v(\n                            \"\\n            Esse campo é obrigatório.\\n          \"\n                          )\n                        ])\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-6 col-md-3\" },\n        [\n          _c(\n            \"b-form-group\",\n            {\n              class: { \"has-error\": _vm.$v.pet.birthdate.$error },\n              attrs: { \"label-for\": \"birthdate\" }\n            },\n            [\n              _c(\"label\", [\n                _vm._v(\" Nascimento \"),\n                _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n              ]),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"mask\",\n                    rawName: \"v-mask\",\n                    value: \"##/##/####\",\n                    expression: \"'##/##/####'\"\n                  },\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.pet.birthdate,\n                    expression: \"pet.birthdate\"\n                  }\n                ],\n                staticClass: \"form-control\",\n                class: { \"is-invalid\": _vm.$v.pet.birthdate.$error },\n                attrs: { id: \"petBirthdate\", type: \"tel\" },\n                domProps: { value: _vm.pet.birthdate },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(_vm.pet, \"birthdate\", $event.target.value)\n                  }\n                }\n              }),\n              _vm.$v.pet.birthdate.$error\n                ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                    !_vm.$v.pet.birthdate.required ||\n                    !_vm.$v.pet.birthdate.minLength\n                      ? _c(\"span\", [_vm._v(\"Este campo é obrigatório. \")])\n                      : _vm._e(),\n                    !_vm.$v.pet.birthdate.date\n                      ? _c(\"span\", [_vm._v(\"Data inválida. \")])\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ]\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-6 col-md-3\" },\n        [\n          _c(\n            \"b-form-group\",\n            {\n              class: { \"has-error\": _vm.$v.pet.weight.$error },\n              attrs: { \"label-for\": \"weight\" }\n            },\n            [\n              _c(\"label\", [\n                _vm._v(\" Peso \"),\n                _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n              ]),\n              _c(\"the-mask\", {\n                staticClass: \"form-control\",\n                class: { \"is-invalid\": _vm.$v.pet.weight.$error },\n                attrs: {\n                  mask: [\"##.# Kg\", \"#.# Kg\", \".# Kg\"],\n                  id: \"weight\",\n                  type: \"tel\"\n                },\n                model: {\n                  value: _vm.pet.weight,\n                  callback: function($$v) {\n                    _vm.$set(_vm.pet, \"weight\", $$v)\n                  },\n                  expression: \"pet.weight\"\n                }\n              }),\n              _vm.$v.pet.weight.$error && !_vm.$v.pet.weight.required\n                ? _c(\"span\", { staticClass: \"help-block invalid-feedback\" }, [\n                    _vm._v(\"\\n          Este campo é obrigatório\\n        \")\n                  ])\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-6 col-md-3\" },\n        [\n          _c(\n            \"b-form-group\",\n            {\n              class: { \"has-error\": _vm.$v.pet.color.$error },\n              attrs: { \"label-for\": \"colors\" }\n            },\n            [\n              _c(\"label\", [\n                _vm._v(\" Cor \"),\n                _c(\"span\", { staticClass: \"text-danger\" }, [_vm._v(\"*\")])\n              ]),\n              _c(\"multiselect\", {\n                class: { \"is-invalid\": _vm.$v.pet.color.$error },\n                attrs: {\n                  options: _vm.colors,\n                  selectLabel: \"\",\n                  placeholder: \"\",\n                  selectedLabel: \"Selecionado\",\n                  deselectLabel: \"Remover\"\n                },\n                model: {\n                  value: _vm.pet.color,\n                  callback: function($$v) {\n                    _vm.$set(_vm.pet, \"color\", $$v)\n                  },\n                  expression: \"pet.color\"\n                }\n              }),\n              _vm.$v.pet.color.$error\n                ? _c(\"div\", { staticClass: \"invalid-feedback\" }, [\n                    !_vm.$v.pet.color.required\n                      ? _c(\"span\", [\n                          _vm._v(\n                            \"\\n            Esse campo é obrigatório.\\n          \"\n                          )\n                        ])\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-6 col-md-3\" },\n        [\n          _c(\n            \"b-form-group\",\n            { attrs: { \"label-for\": \"pedigree\" } },\n            [\n              _c(\"label\", [_vm._v(\" Possui Pedigree? \")]),\n              _c(\n                \"b-form-checkbox\",\n                {\n                  attrs: { name: \"check-button\", switch: \"\" },\n                  model: {\n                    value: _vm.pet.pedigree,\n                    callback: function($$v) {\n                      _vm.$set(_vm.pet, \"pedigree\", $$v)\n                    },\n                    expression: \"pet.pedigree\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n          \" +\n                      _vm._s(_vm.pet.pedigree ? \"Sim\" : \"Não\") +\n                      \"\\n        \"\n                  )\n                ]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"col-12\" },\n        [\n          _c(\"b-form-group\", { attrs: { \"label-for\": \"pedigree\" } }, [\n            _c(\"label\", [\n              _vm._v(\n                \" Monte seu plano escolhendo no mínimo 3 tipos de serviços\"\n              )\n            ]),\n            _c(\n              \"div\",\n              { staticClass: \"row\" },\n              _vm._l(_vm.categories, function(cat) {\n                return _c(\n                  \"div\",\n                  { staticClass: \"col-2\" },\n                  [\n                    _c(\n                      \"b-form-group\",\n                      {\n                        class: { \"is-invalid\": _vm.$v.pet.categories.$error },\n                        attrs: { \"label-for\": \"pedigree\" }\n                      },\n                      [\n                        _c(\n                          \"b-form-checkbox\",\n                          {\n                            attrs: { value: cat.id },\n                            model: {\n                              value: _vm.pet.categories,\n                              callback: function($$v) {\n                                _vm.$set(_vm.pet, \"categories\", $$v)\n                              },\n                              expression: \"pet.categories\"\n                            }\n                          },\n                          [_vm._v(_vm._s(cat.name))]\n                        )\n                      ],\n                      1\n                    )\n                  ],\n                  1\n                )\n              }),\n              0\n            )\n          ])\n        ],\n        1\n      )\n    ]),\n    _c(\"div\", { staticClass: \"row\" }, [\n      _c(\"div\", { staticClass: \"col-12\", attrs: { align: \"center\" } }, [\n        _c(\n          \"button\",\n          {\n            staticClass: \"btn btn-success\",\n            attrs: { disabled: _vm.$v.pet.$invalid },\n            on: {\n              click: function($event) {\n                $event.preventDefault()\n                return _vm.addPet()\n              }\n            }\n          },\n          [_vm._v(\"\\n        Adicionar outro pet\\n      \")]\n        )\n      ])\n    ]),\n    _c(\"div\", { staticClass: \"row\" }, [\n      _c(\"div\", { staticClass: \"col-12\", attrs: { align: \"center\" } }, [\n        _c(\n          \"div\",\n          { staticClass: \"row\" },\n          _vm._l(_vm.pets, function(pet, index) {\n            return _c(\n              \"div\",\n              {\n                staticClass: \"col-12 col-md-6 col-lg-3\",\n                staticStyle: { \"margin-top\": \"15px\" }\n              },\n              [\n                _c(\"div\", { staticClass: \"card\", attrs: { align: \"center\" } }, [\n                  _c(\n                    \"div\",\n                    {\n                      staticClass: \"card-body pb-0\",\n                      staticStyle: {\n                        border: \"1px solid\",\n                        \"border-color\": \"#5369f8\"\n                      }\n                    },\n                    [\n                      _c(\"div\", { staticClass: \"text-center mt-3\" }, [\n                        _c(\"img\", {\n                          staticClass: \"avatar-xl rounded-circle\",\n                          attrs: {\n                            src: require(\"@assets/images/users/avatar-7.jpg\"),\n                            alt: \"\"\n                          }\n                        }),\n                        _c(\"h5\", { staticClass: \"mt-2 mb-0\" }, [\n                          _vm._v(_vm._s(pet.name))\n                        ]),\n                        _c(\n                          \"h6\",\n                          {\n                            staticClass:\n                              \"text-muted font-weight-normal mt-2 mb-4\"\n                          },\n                          _vm._l(pet.categories, function(category) {\n                            return _c(\n                              \"b-badge\",\n                              {\n                                staticClass: \"mr-1 mt-1\",\n                                attrs: { variant: \"primary\" }\n                              },\n                              [_vm._v(_vm._s(_vm.getCategoryName(category)))]\n                            )\n                          }),\n                          1\n                        ),\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"btn btn-primary btn-sm mr-1\",\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.editPet(index)\n                              }\n                            }\n                          },\n                          [_vm._v(\"Editar\")]\n                        ),\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"btn btn-white btn-sm\",\n                            on: {\n                              click: function($event) {\n                                $event.preventDefault()\n                                return _vm.deletePet(index)\n                              }\n                            }\n                          },\n                          [_vm._v(\"Remover\")]\n                        ),\n                        _c(\"div\", { staticClass: \"pt-3 text-left\" }, [\n                          _c(\"p\", { staticClass: \"text-muted mb-4\" }, [\n                            _vm._v(\n                              \"\\n                    \" +\n                                _vm._s(pet.name) +\n                                \", é um \" +\n                                _vm._s(_vm.pet_specie(pet)) +\n                                \" da raça \" +\n                                _vm._s(pet.breed) +\n                                \", \" +\n                                _vm._s(_vm.pet_gender(pet)) +\n                                \", nascido em\\n                    \" +\n                                _vm._s(pet.birthdate) +\n                                \" pesando \" +\n                                _vm._s(pet.weight) +\n                                \" kgs e de cor \" +\n                                _vm._s(pet.color) +\n                                \". \" +\n                                _vm._s(\n                                  pet.pedigree\n                                    ? \"Possui Pedigree\"\n                                    : \"Não possui Pedigree\"\n                                ) +\n                                \"!\\n                  \"\n                            )\n                          ])\n                        ])\n                      ])\n                    ]\n                  )\n                ])\n              ]\n            )\n          }),\n          0\n        )\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}